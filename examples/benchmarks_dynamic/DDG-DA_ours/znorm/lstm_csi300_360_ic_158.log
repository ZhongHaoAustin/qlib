2024-04-25 20:47:58.723 | WARNING  | qlib.tests.data:qlib_data:175 - Data already exists: ~/.qlib/qlib_data/cn_data, the data download will be skipped
	If downloading is required: `exists_skip=False` or `change target_dir`
[3428193:MainThread](2024-04-25 20:47:58,724) INFO - qlib.Initialization - [config.py:416] - default_conf: client.
[3428193:MainThread](2024-04-25 20:47:58,727) INFO - qlib.Initialization - [__init__.py:74] - qlib successfully initialized based on client settings.
[3428193:MainThread](2024-04-25 20:47:58,727) INFO - qlib.Initialization - [__init__.py:76] - data_path={'__DEFAULT_FREQ': PosixPath('/home/zhonghao/.qlib/qlib_data/cn_data')}
Remove CSRankNorm
{'class': 'Alpha360', 'module_path': 'qlib.contrib.data.handler', 'kwargs': {'start_time': datetime.date(2008, 1, 1), 'end_time': datetime.date(2020, 8, 1), 'fit_start_time': datetime.date(2008, 1, 1), 'fit_end_time': datetime.date(2014, 12, 31), 'instruments': 'csi300', 'infer_processors': [{'class': 'RobustZScoreNorm', 'kwargs': {'fields_group': 'feature', 'clip_outlier': True}}, {'class': 'Fillna', 'kwargs': {'fields_group': 'feature'}}], 'learn_processors': [{'class': 'DropnaLabel'}, {'class': 'CSZScoreNorm', 'kwargs': {'fields_group': 'label'}}], 'label': ['Ref($close, -2) / Ref($close, -1) - 1']}}
[3428193:MainThread](2024-04-25 20:47:58,759) INFO - qlib.RollingBenchmark - [rolling_benchmark.py:208] - {'model': {'class': 'LSTM', 'module_path': 'qlib.contrib.model.pytorch_lstm', 'kwargs': {'d_feat': 6, 'hidden_size': 64, 'num_layers': 2, 'dropout': 0.0, 'n_epochs': 200, 'lr': 0.001, 'early_stop': 8, 'batch_size': 5000, 'metric': 'loss', 'loss': 'mse', 'GPU': 0}}, 'dataset': {'class': 'DatasetH', 'module_path': 'qlib.data.dataset', 'kwargs': {'handler': 'file:///home/zhonghao/sjtu/qlib/examples/benchmarks_dynamic/baseline/cn_data_csi300_rankFalse_alpha360_handler_horizon1.pkl', 'segments': {'train': [datetime.date(2008, 1, 1), datetime.date(2014, 12, 31)], 'valid': [datetime.date(2015, 1, 1), datetime.date(2016, 12, 31)], 'test': [datetime.date(2017, 1, 1), datetime.date(2020, 8, 1)]}}}, 'record': ['qlib.workflow.record_temp.SignalRecord']}
[3428193:MainThread](2024-04-25 20:47:58,761) WARNING - qlib.data - [data.py:666] - load calendar error: freq=day, future=True; return current calendar!
[3428193:MainThread](2024-04-25 20:47:58,762) WARNING - qlib.data - [data.py:669] - You can get future calendar by referring to the following document: https://github.com/microsoft/qlib/blob/main/scripts/data_collector/contrib/README.md
[3428193:MainThread](2024-04-25 20:47:58,808) INFO - qlib.MetaDatasetDS - [dataset.py:316] - Example task for training meta model: {'model': {'class': 'LSTM', 'module_path': 'qlib.contrib.model.pytorch_lstm', 'kwargs': {'d_feat': 6, 'hidden_size': 64, 'num_layers': 2, 'dropout': 0.0, 'n_epochs': 200, 'lr': 0.001, 'early_stop': 8, 'batch_size': 5000, 'metric': 'loss', 'loss': 'mse', 'GPU': 0}}, 'dataset': {'class': 'DatasetH', 'module_path': 'qlib.data.dataset', 'kwargs': {'handler': 'file:///home/zhonghao/sjtu/qlib/examples/benchmarks_dynamic/baseline/cn_data_csi300_rankFalse_alpha360_handler_horizon1.pkl', 'segments': {'train': (Timestamp('2008-01-02 00:00:00'), Timestamp('2014-12-31 00:00:00')), 'valid': (Timestamp('2015-01-05 00:00:00'), Timestamp('2016-12-29 00:00:00')), 'test': (Timestamp('2017-01-03 00:00:00'), Timestamp('2017-02-06 00:00:00'))}}}, 'record': ['qlib.workflow.record_temp.SignalRecord']}
creating meta tasks:   0%|          | 0/44 [00:00<?, ?it/s]creating meta tasks:   2%|▏         | 1/44 [00:00<00:17,  2.42it/s]creating meta tasks:   5%|▍         | 2/44 [00:00<00:16,  2.55it/s]creating meta tasks:   7%|▋         | 3/44 [00:01<00:15,  2.62it/s]creating meta tasks:   9%|▉         | 4/44 [00:01<00:15,  2.65it/s]creating meta tasks:  11%|█▏        | 5/44 [00:01<00:14,  2.67it/s]creating meta tasks:  14%|█▎        | 6/44 [00:02<00:15,  2.47it/s]creating meta tasks:  16%|█▌        | 7/44 [00:02<00:14,  2.53it/s]creating meta tasks:  18%|█▊        | 8/44 [00:03<00:14,  2.55it/s]creating meta tasks:  20%|██        | 9/44 [00:03<00:13,  2.55it/s]creating meta tasks:  23%|██▎       | 10/44 [00:03<00:13,  2.58it/s]creating meta tasks:  25%|██▌       | 11/44 [00:04<00:12,  2.61it/s]creating meta tasks:  27%|██▋       | 12/44 [00:04<00:12,  2.62it/s]creating meta tasks:  30%|██▉       | 13/44 [00:05<00:11,  2.62it/s]creating meta tasks:  32%|███▏      | 14/44 [00:05<00:11,  2.63it/s]creating meta tasks:  34%|███▍      | 15/44 [00:05<00:11,  2.62it/s]creating meta tasks:  36%|███▋      | 16/44 [00:06<00:10,  2.61it/s]creating meta tasks:  39%|███▊      | 17/44 [00:06<00:10,  2.61it/s]creating meta tasks:  41%|████      | 18/44 [00:06<00:09,  2.60it/s]creating meta tasks:  43%|████▎     | 19/44 [00:07<00:09,  2.60it/s]creating meta tasks:  45%|████▌     | 20/44 [00:07<00:09,  2.59it/s]creating meta tasks:  48%|████▊     | 21/44 [00:08<00:08,  2.58it/s]creating meta tasks:  50%|█████     | 22/44 [00:08<00:08,  2.57it/s]creating meta tasks:  52%|█████▏    | 23/44 [00:08<00:08,  2.56it/s]creating meta tasks:  55%|█████▍    | 24/44 [00:09<00:07,  2.55it/s]Terminated
